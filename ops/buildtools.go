package ops

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"
)

const (
	BuildSpigot      = 1
	BuildCraftBukkit = 2

	BuildToolsDir = "getjar-buildtools"
	BuildToolsJar = "BuildTools.jar"
)

func RunBuildTools(verbose bool, btverbose bool, buildType int, version string, filename string, experimental bool) error {
	err := getBuildTools(verbose)
	if err != nil {
		return nil
	}
	err = os.Chdir(BuildToolsDir)
	if err != nil {
		return nil
	}
	log(verbose, "changed working directory to buildtools directory")

	var cmd *exec.Cmd
	if !experimental {
		cmd = exec.Command("java", "-jar", BuildToolsJar, "--rev", version)
	} else if experimental {
		cmd = exec.Command("java", "-jar", BuildToolsJar, "--rev", version, "--experimental")
	}

	cmdStdout, err := cmd.StdoutPipe()
	if err != nil {
		return err
	}
	cmdStderr, err := cmd.StderrPipe()
	if err != nil {
		return err
	}
	log(verbose, "created pipes")

	err = cmd.Start()
	if err != nil {
		return err
	}
	log(verbose, "started process")

	go func() {
		if btverbose {
			_, _ = io.Copy(os.Stdout, cmdStdout)
		} else {
			_, _ = io.Copy(io.Discard, cmdStdout)
		}
	}()

	go func() {
		if verbose {
			_, _ = io.Copy(os.Stderr, cmdStderr)
		} else {
			_, _ = io.Copy(io.Discard, cmdStderr)
		}
	}()

	err = cmd.Wait()
	if err != nil {
		if !verbose && !btverbose {
			bs, _ := os.ReadFile("BuildTools.log.txt")
			s := string(bs)
			lines := strings.Split(s, "\n")

			fmt.Println("buildtools ran into an error")
			fmt.Println("last five lines of BuildTools.log.txt")
			fmt.Println(lines[len(lines)-1])
			fmt.Println(lines[len(lines)-2])
			fmt.Println(lines[len(lines)-3])
			fmt.Println(lines[len(lines)-4])
			fmt.Println(lines[len(lines)-5])
		}
		return err
	}
	log(verbose, "successfully compiled jar with buildtools")

	outBytes, err := os.ReadFile("BuildTools.log.txt")
	if err != nil {
		return err
	}
	out := string(outBytes)
	regex := regexp.MustCompile(`(spigot-1\.\d\d.\d\.jar)`)
	matches := regex.FindStringSubmatch(out)
	var autoFileName string
	if buildType == BuildSpigot {
		autoFileName = matches[len(matches)-1]
	} else if buildType == BuildCraftBukkit {
		autoFileName = matches[len(matches)-2]
	}
	log(verbose, "extracted autogenerated filename")

	err = os.Chdir("..")
	if err != nil {
		return nil
	}
	log(verbose, "changed working directory to original directory")

	bytes, err := os.ReadFile(filepath.Join(BuildToolsDir, autoFileName))
	if err != nil {
		return err
	}
	err = os.WriteFile(filename, bytes, os.ModePerm)
	log(verbose, "moved file and renamed")

	return nil
}

func getBuildTools(verbose bool) error {
	if _, er := os.Stat("getjar-buildtools"); os.IsNotExist(er) {
		log(verbose, "buildtools missing, getting buildtools")

		err := os.MkdirAll("getjar-buildtools", os.ModePerm)
		if err != nil {
			return err
		}
		log(verbose, "created directory for buildtools:", BuildToolsDir)

		resp, err := http.Get("https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar")
		if err != nil {
			return err
		}
		log(verbose, "downloaded BuildTools.jar")
		defer func() { _ = resp.Body.Close() }()

		file, err := os.Create(filepath.Join(BuildToolsDir, BuildToolsJar))
		if err != nil {
			return err
		}
		defer func() { _ = file.Close() }()

		_, err = io.Copy(file, resp.Body)
		if err != nil {
			return err
		}
		log(verbose, "finished getting buildtools")

		if !(os.PathSeparator == '\\' && os.PathListSeparator == ';') {
			cmd := exec.Command("git", "config", "--global", "--unset", "core.autocrlf")
			_, err = cmd.CombinedOutput()
			if err != nil {
				return err
			}
			log(verbose, "set git config according to buildtools docs (non-windows only)")
		}

		return nil
	}
	return nil
}
